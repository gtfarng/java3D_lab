/* ObjLoad.java 1.16 01/02/23 14:17:39 * Copyright (c) 1996-2001 Sun Microsystems, Inc. All Rights Reserved. */import java.applet.Applet;import java.awt.*;import java.awt.event.*;import java.io.*;import javax.media.j3d.*;import javax.vecmath.*;import com.sun.j3d.utils.applet.MainFrame;import com.sun.j3d.utils.universe.*;import com.sun.j3d.utils.behaviors.vp.*;import com.sun.j3d.loaders.objectfile.ObjectFile;import com.sun.j3d.loaders.*;public class ObjLoad extends Applet{  private boolean spin = false;  private boolean noTriangulate = false;  private boolean noStripify = false;  private double creaseAngle = 60.0;  private String filename = null;  private SimpleUniverse u;  public ObjLoad(String args[])  {    if (args.length == 0)      usage();    else {      for (int i = 0; i < args.length; i++) {        if (args[i].startsWith("-")) {          if (args[i].equals("-s"))            spin = true;          else if (args[i].equals("-n"))            noTriangulate = true;          else if (args[i].equals("-t"))            noStripify = true;          else if (args[i].equals("-c")) {            if (i < args.length - 1)              creaseAngle = (new Double(args[++i])).doubleValue();            else              usage();          }          else            System.err.println("Argument '" + args[i] + "' ignored.");        }        else          filename = args[i];      }    }    if (filename == null)      usage();    setLayout(new BorderLayout());    GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();    Canvas3D c = new Canvas3D(config);    add("Center", c);    // Create a simple scene and attach it to the virtual universe    BranchGroup scene = createSceneGraph(args);    u = new SimpleUniverse(c);	    // add mouse behaviors to the ViewingPlatform    ViewingPlatform viewingPlatform = u.getViewingPlatform();    // This will move the ViewPlatform back a bit so the    // objects in the scene can be viewed.    viewingPlatform.setNominalViewingTransform();	    if (!spin) {      OrbitBehavior orbit = new OrbitBehavior(c, OrbitBehavior.REVERSE_ALL);      BoundingSphere bounds = new BoundingSphere(new Point3d(0.0, 0.0, 0.0), 100.0);      orbit.setSchedulingBounds(bounds);      viewingPlatform.setViewPlatformBehavior(orbit);	        }	    u.addBranchGraph(scene);  }  // end of ObjLoad()  private void usage()  {    System.out.println(        "Usage: java ObjLoad [-s] [-n] [-t] [-c degrees] <.obj file>");    System.out.println("  -s Spin (no user interaction)");    System.out.println("  -n No triangulation");    System.out.println("  -t No stripification");    System.out.println("  -c Set crease angle for normal generation (default is 60 without");    System.out.println("     smoothing group info, otherwise 180 within smoothing groups)");    System.exit(0);  } // end of usage()  public BranchGroup createSceneGraph(String args[])  {    // Create the root of the branch graph    BranchGroup objRoot = new BranchGroup();    // Create a Transformgroup to scale all objects so they    // appear in the scene.    TransformGroup objScale = new TransformGroup();    Transform3D t3d = new Transform3D();    t3d.setScale(0.7);    objScale.setTransform(t3d);    objRoot.addChild(objScale);    // Create the transform group node and initialize it to the    // identity.  Enable the TRANSFORM_WRITE capability so that    // our behavior code can modify it at runtime.  Add it to the    // root of the subgraph.    TransformGroup objTrans = new TransformGroup();    objTrans.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);    objTrans.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);    objScale.addChild(objTrans);    int flags = ObjectFile.RESIZE;    if (!noTriangulate)      flags |= ObjectFile.TRIANGULATE;    if (!noStripify)      flags |= ObjectFile.STRIPIFY;    ObjectFile f = new ObjectFile(flags,                            (float)(creaseAngle * Math.PI / 180.0));    Scene s = null;    try {      s = f.load(filename);    }    catch (FileNotFoundException e) {      System.err.println(e);      System.exit(1);    }    catch (ParsingErrorException e) {      System.err.println(e);      System.exit(1);    }    catch (IncorrectFormatException e) {      System.err.println(e);      System.exit(1);    }	      objTrans.addChild(s.getSceneGroup());    BoundingSphere bounds = new BoundingSphere(new Point3d(0.0, 0.0, 0.0), 100.0);    if (spin) {      Transform3D yAxis = new Transform3D();      Alpha rotationAlpha = new Alpha(-1, Alpha.INCREASING_ENABLE, 0, 0, 4000, 0,          0, 0, 0, 0);      RotationInterpolator rotator = new RotationInterpolator(rotationAlpha,          objTrans, yAxis, 0.0f, (float) Math.PI * 2.0f);      rotator.setSchedulingBounds(bounds);      objTrans.addChild(rotator);    }     // Set up the background    Color3f bgColor = new Color3f(0.05f, 0.05f, 0.5f);    Background bgNode = new Background(bgColor);    bgNode.setApplicationBounds(bounds);    objRoot.addChild(bgNode);    // Set up the ambient light    Color3f ambientColor = new Color3f(0.1f, 0.1f, 0.1f);    AmbientLight ambientLightNode = new AmbientLight(ambientColor);    ambientLightNode.setInfluencingBounds(bounds);    objRoot.addChild(ambientLightNode);    // Set up the directional lights    Color3f light1Color = new Color3f(1.0f, 1.0f, 0.9f);    Vector3f light1Direction = new Vector3f(1.0f, 1.0f, 1.0f);    Color3f light2Color = new Color3f(1.0f, 1.0f, 1.0f);    Vector3f light2Direction = new Vector3f(-1.0f, -1.0f, -1.0f);    DirectionalLight light1 = new DirectionalLight(light1Color, light1Direction);    light1.setInfluencingBounds(bounds);    objRoot.addChild(light1);    DirectionalLight light2 = new DirectionalLight(light2Color, light2Direction);    light2.setInfluencingBounds(bounds);    objRoot.addChild(light2);    return objRoot;  }  // end of createSceneGraph()  public void destroy()   {  u.removeAllLocales();  }// ---------------------------------------------------  public static void main(String[] args)   {  new MainFrame(new ObjLoad(args), 700, 700);  }}  // end of ObjLoad class